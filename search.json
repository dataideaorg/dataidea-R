[
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html",
    "title": "Data Cleaning Crash Course",
    "section": "",
    "text": "# Load the dataset\ndata(mtcars)\n\n# Simulate messy data (just for demonstration purposes)\nmtcars$mpg[c(5, 10, 15)] &lt;- NA  # Introduce missing values\nmtcars$cyl[c(3, 8)] &lt;- NA       # More missing values in categorical column\nmtcars &lt;- rbind(mtcars, mtcars[1, ])  # Introduce a duplicate row\n\n# View the first few rows of the messy data\nhead(mtcars)\n\n\nA data.frame: 6 × 11\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\nNA\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\nNA\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#installing-and-loading-necessary-packages",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#installing-and-loading-necessary-packages",
    "title": "Data Cleaning Crash Course",
    "section": "3. Installing and Loading Necessary Packages",
    "text": "3. Installing and Loading Necessary Packages\nWe’ll use the dplyr package, part of the tidyverse, which provides a set of tools for data manipulation and cleaning.\n\n# Install and load the dplyr package\n# install.packages(\"dplyr\")\n# library(dplyr)\n\nInstalling package into ‘/home/jumashafara/R/x86_64-pc-linux-gnu-library/4.3’\n(as ‘lib’ is unspecified)",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#checking-for-missing-values",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#checking-for-missing-values",
    "title": "Data Cleaning Crash Course",
    "section": "4. Checking for Missing Values",
    "text": "4. Checking for Missing Values\nThe first step in data cleaning is to check for missing values in your dataset.\n\n# Check for missing values in the dataset\ncolSums(is.na(mtcars))\n\nmpg3cyl2disp0hp0drat0wt0qsec0vs0am0gear0carb0\n\n\nExplanation: - is.na(): Identifies missing values. - colSums(): Sums the number of missing values per column.",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#handling-missing-data",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#handling-missing-data",
    "title": "Data Cleaning Crash Course",
    "section": "5. Handling Missing Data",
    "text": "5. Handling Missing Data\nThere are several ways to handle missing data, including removing rows with missing values, filling them in with a specific value (such as the mean or median), or using more advanced imputation techniques.\n\nRemoving Rows with Missing Values\n\n# Remove rows with any missing values\nmtcars_cleaned &lt;- na.omit(mtcars)\n\n# View cleaned dataset\nhead(mtcars_cleaned)\n\n\nA data.frame: 6 × 11\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\n\n\n\n\n\nFilling Missing Values with Mean or Median\nYou can fill missing numeric values with the column mean or median.\n\n# Fill missing values in the 'mpg' column with the mean\nmtcars$mpg[is.na(mtcars$mpg)] &lt;- mean(mtcars$mpg, na.rm = TRUE)\n\n# Fill missing values in the 'cyl' column with the mode\nmtcars$cyl[is.na(mtcars$cyl)] &lt;- as.numeric(names(sort(table(mtcars$cyl), decreasing = TRUE)[1]))\n\n# Verify that missing values are filled\ncolSums(is.na(mtcars))\n\nmpg0cyl0disp0hp0drat0wt0qsec0vs0am0gear0carb0\n\n\nExplanation: - mean(mtcars$mpg, na.rm = TRUE): Calculates the mean while ignoring NA values. - table(): Creates a frequency table (used to find the mode).",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#dealing-with-duplicates",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#dealing-with-duplicates",
    "title": "Data Cleaning Crash Course",
    "section": "6. Dealing with Duplicates",
    "text": "6. Dealing with Duplicates\nDuplicate rows can distort your analysis, so it’s important to remove them.\n\n# Check for duplicate rows\nsum(duplicated(mtcars))\n\n# Remove duplicate rows\nmtcars &lt;- mtcars[!duplicated(mtcars), ]\n\n# Verify removal\nsum(duplicated(mtcars))\n\n1\n\n\n0\n\n\nExplanation: - duplicated(): Returns a logical vector indicating which rows are duplicates. - !duplicated(): Filters out the duplicated rows.",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#data-type-conversion",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#data-type-conversion",
    "title": "Data Cleaning Crash Course",
    "section": "7. Data Type Conversion",
    "text": "7. Data Type Conversion\nSometimes, columns have incorrect data types, such as numeric columns being stored as characters. You need to convert them to the correct type.\n\nChecking Data Types\n\n# Check the data types of all columns\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 20.5 ...\n $ cyl : num  6 6 8 6 8 6 8 8 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\n\n\nConverting Data Types\nConvert the cyl column from numeric to factor since it represents categorical data.\n\n# Convert 'cyl' to a factor\nmtcars$cyl &lt;- as.factor(mtcars$cyl)\n\n# Verify the conversion\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 20.5 ...\n $ cyl : Factor w/ 3 levels \"4\",\"6\",\"8\": 2 2 3 2 3 2 3 3 1 2 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#renaming-columns",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#renaming-columns",
    "title": "Data Cleaning Crash Course",
    "section": "8. Renaming Columns",
    "text": "8. Renaming Columns\nRenaming columns is often necessary to make your dataset easier to work with.\n# Rename columns using dplyr\nmtcars &lt;- mtcars %&gt;%\n  rename(Miles_Per_Gallon = mpg, Cylinders = cyl)\n\n# View the renamed dataset\nhead(mtcars)\n\n**Explanation:**\n- `rename()`: Renames columns, using the syntax `new_name = old_name`.\n\n## 9. Filtering and Subsetting Data\n\nFiltering allows you to work with a subset of the data based on certain conditions.\n\n### Filtering Rows\n\n::: {#cell-21 .cell vscode='{\"languageId\":\"r\"}'}\n``` {.R .cell-code}\n# Filter rows where MPG is greater than 20\nmtcars_filtered &lt;- mtcars %&gt;%\n  filter(Miles_Per_Gallon &gt; 20)\n\n# View the filtered data\nhead(mtcars_filtered)\n:::\n\nSelecting Specific Columns\n\n# Select only the 'Miles_Per_Gallon' and 'Cylinders' columns\nmtcars_subset &lt;- mtcars %&gt;%\n  select(Miles_Per_Gallon, Cylinders)\n\n# View the subsetted data\nhead(mtcars_subset)\n\nExplanation: - filter(): Filters rows based on a condition. - select(): Selects specific columns from the dataset.",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#dealing-with-outliers",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#dealing-with-outliers",
    "title": "Data Cleaning Crash Course",
    "section": "10. Dealing with Outliers",
    "text": "10. Dealing with Outliers\nOutliers can skew your analysis, so it’s important to detect and handle them. Here’s how to detect outliers using the Interquartile Range (IQR) method.\n\nIdentifying Outliers\n\n# Calculate the IQR for the 'mpg' column\nQ1 &lt;- quantile(mtcars$Miles_Per_Gallon, 0.25)\nQ3 &lt;- quantile(mtcars$Miles_Per_Gallon, 0.75)\nIQR &lt;- Q3 - Q1\n\n# Define outlier bounds\nlower_bound &lt;- Q1 - 1.5 * IQR\nupper_bound &lt;- Q3 + 1.5 * IQR\n\n# Identify outliers\noutliers &lt;- mtcars %&gt;%\n  filter(Miles_Per_Gallon &lt; lower_bound | Miles_Per_Gallon &gt; upper_bound)\n\n# View the outliers\noutliers\n\n\n\nRemoving Outliers\n\n# Remove outliers\nmtcars_no_outliers &lt;- mtcars %&gt;%\n  filter(Miles_Per_Gallon &gt;= lower_bound & Miles_Per_Gallon &lt;= upper_bound)\n\n# Verify removal of outliers\nsummary(mtcars_no_outliers$Miles_Per_Gallon)\n\nExplanation: - quantile(): Calculates quantiles. - IQR (Interquartile Range) is used to define lower and upper bounds for outliers.",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#transforming-variables",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#transforming-variables",
    "title": "Data Cleaning Crash Course",
    "section": "11. Transforming Variables",
    "text": "11. Transforming Variables\nData transformation can help make your data more suitable for analysis. Common transformations include creating new variables, normalizing, or scaling data.\n\nCreating New Variables\n\n# Create a new variable 'wt_kg' by converting 'wt' from 1000 lbs to kg\nmtcars &lt;- mtcars %&gt;%\n  mutate(wt_kg = wt * 453.592)\n\n# View the new variable\nhead(mtcars)\n\n\n\nScaling and Normalizing Data\n\n# Normalize 'Miles_Per_Gallon' (min-max scaling)\nmtcars &lt;- mtcars %&gt;%\n  mutate(Miles_Per_Gallon_scaled = (Miles_Per_Gallon - min(Miles_Per_Gallon)) / (max(Miles_Per_Gallon) - min(Miles_Per_Gallon)))\n\n# View the scaled column\nhead(mtcars$Miles_Per_Gallon_scaled)\n\nExplanation: - mutate(): Adds new variables or modifies existing ones. - Scaling helps bring all values into a comparable range, especially for machine learning tasks.",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#conclusion",
    "href": "R-Data-Analysis/Week2-Data-Cleaning/2.1_data_cleaning_crash_course.html#conclusion",
    "title": "Data Cleaning Crash Course",
    "section": "12. Conclusion",
    "text": "12. Conclusion\nIn this tutorial, we have covered the essential steps in data cleaning using R. Here’s a quick recap:\n\nChecking and Handling Missing Data: Use functions like na.omit() or fill missing values with mean, median, or mode.\nDealing with Duplicates: Identify and remove duplicate rows.\nData Type Conversion: Convert columns to their appropriate data types.\nRenaming Columns: Rename columns for better clarity.\nFiltering and Subsetting Data: Filter rows and select specific columns based on your needs.\nHandling Outliers: Identify and remove outliers using the IQR method.\nTransforming Data: Create new variables, scale, or normalize existing data.\n\nThese techniques form the foundation of effective data cleaning.\nOnce your data is cleaned, it’s ready for analysis, visualization, or modeling.\n\nWhat’s on your mind? Put it in the comments!",
    "crumbs": [
      "R-Data-Analysis",
      "Week2-Data-Cleaning",
      "Data Cleaning Crash Course"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html",
    "title": "Base R Crash Course: Core Concepts",
    "section": "",
    "text": "# Assign values to variables\nx &lt;- 10\ny &lt;- 5\n\n# Print the variables\nx\ny\n\n10\n\n\n5",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#data-types",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#data-types",
    "title": "Base R Crash Course: Core Concepts",
    "section": "3. Data Types",
    "text": "3. Data Types\nR has several basic data types, which are essential to understand for any operation.\n\nNumeric Data Type\n\nnum &lt;- 42.5  # Decimal numbers\nnum\n\n42.5\n\n\n\n\nInteger Data Type\n\nint &lt;- 10L  # Add \"L\" to specify an integer\nint\n\n10\n\n\n\n\nCharacter Data Type\n\nchar &lt;- \"Hello, World!\"\nchar\n\n'Hello, World!'\n\n\n\n\nLogical Data Type\n\nlogi &lt;- TRUE\nlogi\n\nTRUE\n\n\n\n\nChecking Data Type\nYou can check the type of any variable using the class() function.\n\nclass(num)   # Numeric\n\n'numeric'\n\n\n\n\nType Checking Continued\nYou can check the type of any variable using the class() and typeof() functions:\n\nclass(num)   # Numeric\nclass(char)  # Character\nclass(logi)  # Logical\n\ntypeof(int)  # Integer\n\n'numeric'\n\n\n'character'\n\n\n'logical'\n\n\n'integer'\n\n\n\n\nType Conversion\nConverting between types is often necessary when working with different data.\n\n# Convert numeric to integer\nnum_to_int &lt;- as.integer(num)\n\n# Convert integer to numeric\nint_to_num &lt;- as.numeric(int)\n\n# Convert numeric to character\nnum_to_char &lt;- as.character(num)\n\n# Convert character to numeric\nchar_to_num &lt;- as.numeric(\"123\")  # Works only if conversion is possible",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#vectors",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#vectors",
    "title": "Base R Crash Course: Core Concepts",
    "section": "4. Vectors",
    "text": "4. Vectors\nVectors are one of the most basic data structures in R and represent a sequence of elements of the same type.\n\nCreating Vectors\n\n# Numeric vector\nnum_vec &lt;- c(1, 2, 3, 4, 5)\n\n# Character vector\nchar_vec &lt;- c(\"apple\", \"banana\", \"cherry\")\n\n# Logical vector\nlogi_vec &lt;- c(TRUE, FALSE, TRUE)\n\n\n\nAccessing Vector Elements\nYou can access vector elements using indexing. In R, indices start at 1.\n\n# Access the 2nd element of num_vec\nnum_vec[2]\n\n# Access the last element of char_vec\nchar_vec[length(char_vec)]\n\n2\n\n\n'cherry'\n\n\n\n\nVector Operations\nVectors in R are vectorized, meaning you can perform operations element-wise.\n\n# Add a constant to each element\nnum_vec + 10\n\n# Element-wise addition of two vectors\nvec1 &lt;- c(1, 2, 3)\nvec2 &lt;- c(4, 5, 6)\nvec1 + vec2\n\n# Logical operations\nlogi_vec & c(TRUE, FALSE, FALSE)\n\n\n1112131415\n\n\n\n579\n\n\n\nTRUEFALSEFALSE\n\n\n\n\nCommon Vector Functions\n\n# Length of a vector\nlength(num_vec)\n\n# Sort a vector\nsorted_vec &lt;- sort(num_vec)\n\n# Find unique elements\nunique(char_vec)\n\n# Calculate sum and mean\nsum(num_vec)\nmean(num_vec)\n\n5\n\n\n\n'apple''banana''cherry'\n\n\n15\n\n\n3",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#lists",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#lists",
    "title": "Base R Crash Course: Core Concepts",
    "section": "5. Lists",
    "text": "5. Lists\nA list is an ordered collection of elements that can contain different types of data (e.g., vectors, matrices, or even other lists).\n\nCreating a List\n\nmy_list &lt;- list(name = \"John\", age = 25, scores = c(90, 85, 88))\n\n# View the list\nmy_list\n\n\n    $name\n        'John'\n    $age\n        25\n    $scores\n        \n908588\n\n\n\n\n\n\nAccessing List Elements\nYou can access list elements using either the $ operator or square brackets.\n\n# Access 'name' using $\nmy_list$name\n\n# Access 'age' using square brackets\nmy_list[[\"age\"]]\n\n# Access the vector 'scores'\nmy_list$scores\n\n'John'\n\n\n25\n\n\n\n908588\n\n\n\n\nModifying a List\n\n# Change the 'name'\nmy_list$name &lt;- \"Jane\"\n\n# Add a new element\nmy_list$city &lt;- \"New York\"",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#matrices",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#matrices",
    "title": "Base R Crash Course: Core Concepts",
    "section": "6. Matrices",
    "text": "6. Matrices\nA matrix is a 2-dimensional data structure where each element must be of the same type (numeric, character, etc.).\n\nCreating a Matrix\n\n# Create a 3x3 matrix\nmat &lt;- matrix(1:9, nrow = 3, ncol = 3)\n\n# View the matrix\nmat\n\n\nA matrix: 3 × 3 of type int\n\n\n1\n4\n7\n\n\n2\n5\n8\n\n\n3\n6\n9\n\n\n\n\n\n\n\nAccessing Matrix Elements\nYou can access matrix elements by specifying their row and column indices.\n\n# Access element in the 2nd row, 3rd column\nmat[2, 3]\n\n# Access the entire 1st row\nmat[1, ]\n\n# Access the entire 2nd column\nmat[, 2]\n\n8\n\n\n\n147\n\n\n\n456\n\n\n\n\nMatrix Operations\n\n# Transpose the matrix\nt(mat)\n\n# Matrix multiplication\nmat %*% t(mat)\n\n# Element-wise multiplication\nmat * mat\n\n\nA matrix: 3 × 3 of type int\n\n\n1\n2\n3\n\n\n4\n5\n6\n\n\n7\n8\n9\n\n\n\n\n\n\nA matrix: 3 × 3 of type dbl\n\n\n66\n78\n90\n\n\n78\n93\n108\n\n\n90\n108\n126\n\n\n\n\n\n\nA matrix: 3 × 3 of type int\n\n\n1\n16\n49\n\n\n4\n25\n64\n\n\n9\n36\n81",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#data-frames",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#data-frames",
    "title": "Base R Crash Course: Core Concepts",
    "section": "7. Data Frames",
    "text": "7. Data Frames\nA data frame is a table where each column can have a different data type (e.g., numeric, character, factor). It’s one of the most commonly used data structures in R.\n\nCreating a Data Frame\n\n# Create a data frame\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(24, 22, 23),\n  Score = c(89, 76, 95)\n)\n\n# View the data frame\ndf\n\n\nA data.frame: 3 × 3\n\n\nName\nAge\nScore\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n24\n89\n\n\nBob\n22\n76\n\n\nCharlie\n23\n95\n\n\n\n\n\n\n\nAccessing Data Frame Elements\nYou can access specific elements, rows, or columns using indexing.\n\n# Access the 'Name' column\ndf$Name\n\n# Access the 2nd row\ndf[2, ]\n\n# Access a specific element (3rd row, 2nd column)\ndf[3, 2]\n\n\n'Alice''Bob''Charlie'\n\n\n\nA data.frame: 1 × 3\n\n\n\nName\nAge\nScore\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n2\nBob\n22\n76\n\n\n\n\n\n23\n\n\n\n\nAdding New Columns\n\n# Add a new column to the data frame\ndf$City &lt;- c(\"New York\", \"San Francisco\", \"Chicago\")\n\n# View updated data frame\ndf\n\n\nA data.frame: 3 × 4\n\n\nName\nAge\nScore\nCity\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;chr&gt;\n\n\n\n\nAlice\n24\n89\nNew York\n\n\nBob\n22\n76\nSan Francisco\n\n\nCharlie\n23\n95\nChicago\n\n\n\n\n\n\n\nSubsetting a Data Frame\nYou can filter rows based on conditions.\n\n# Subset rows where Age is greater than 22\nsubset(df, Age &gt; 22)\n\n\nA data.frame: 2 × 4\n\n\n\nName\nAge\nScore\nCity\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;chr&gt;\n\n\n\n\n1\nAlice\n24\n89\nNew York\n\n\n3\nCharlie\n23\n95\nChicago",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#control-structures",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#control-structures",
    "title": "Base R Crash Course: Core Concepts",
    "section": "8. Control Structures",
    "text": "8. Control Structures\nControl structures allow you to control the flow of execution based on conditions or iterations.\n\nIf-Else Statement\n\n# Example of if-else\nx &lt;- 5\nif (x &gt; 0) {\n  print(\"x is positive\")\n} else {\n  print(\"x is non-positive\")\n}\n\n[1] \"x is positive\"\n\n\n\n\nFor Loops\n\n# Example of a for loop\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\nWhile Loop\n\n# Example of a while loop\ni &lt;- 1\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#functions",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#functions",
    "title": "Base R Crash Course: Core Concepts",
    "section": "9. Functions",
    "text": "9. Functions\nFunctions in R allow you to create reusable blocks of code. You define a function using the function() keyword.\n\nDefining a Function\n\n# Define a function that adds two numbers\nadd_numbers &lt;- function(a, b) {\n  return(a + b)\n}\n\n# Call the function\nadd_numbers(5, 3)\n\n8\n\n\n\n\nDefault Arguments\nYou can provide default values for function arguments.\n\n# Define a function with default arguments\ngreet &lt;- function(name = \"User\") {\n  paste(\"Hello,\", name)\n}\n\n# Call the function with and without arguments\ngreet(\"Alice\")\ngreet()\n\n'Hello, Alice'\n\n\n'Hello, User'",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#conclusion",
    "href": "R-Data-Analysis/Week1-Introduction/1.1_r_crash_course.html#conclusion",
    "title": "Base R Crash Course: Core Concepts",
    "section": "10. Conclusion",
    "text": "10. Conclusion\nThis Base R crash course covers the core concepts needed to get started with R, including:\n\nVariables and basic data types (numeric, integer, character, logical).\nVectors, lists, matrices, and data frames—the primary data structures in R.\nControl structures such as loops and conditionals to manage the flow of your program.\nCreating and using functions to make reusable code blocks.\n\nMastering these concepts will give you a strong foundation to perform more advanced tasks in R, such as data analysis and visualization.\n\nWhat’s on your mind? Put it in the comments!",
    "crumbs": [
      "R-Data-Analysis",
      "Week1-Introduction",
      "Base R Crash Course: Core Concepts"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html",
    "href": "R-Course/r_operations.html",
    "title": "Operations",
    "section": "",
    "text": "The types of operations in R can be broken down into these below: 1. Assignment Operators 1. Arithmetic Operators 1. Comparison Operators 1. Logical Operators 1. Identity Operators 1. Membership Operators\nLets Explore one by one below to see exactly what each is all about and some examples along the way.\n\n\nAssignment operators in programming are used to assign values to variables. These operators store a value on the right side of the operator into the variable on the left side. In most programming languages, assignment operators not only assign values but also can perform arithmetic operations and then assign the result to a variable.\n\n\n\nSimple Assignment (=): Assigns a value to a variable (e.g., a = 5).\nAssignment with (&lt;-): Assigns a value to a variable (e.g., a &lt;- 5).\n\n\n# Simple Assignment using (&lt;-).\nnum &lt;- 20 \nprint(num)\n\n[1] 20\n\n\n\n# Assignment using (=).\nnum_1 = 25 # or num = 20 This will work in R\nprint(num_1)\n\n[1] 25\n\n\nNB: If you coming from another Programming language. its time to let you know that R doesnt have short hand syntax support so we can not use syntax like num = 1 then num +=1\n\n\n\n\nArithmetic operations in programming and mathematics involve performing basic calculations on numerical values. These operations are fundamental to many algorithms and data manipulations. Here’s a detailed definition and explanation of each.\n\n\nArithmetic Operations: 1. Addition (+): Combines two values (e.g., a + b). 1. Subtraction (-): Subtracts one value from another (e.g., a - b). 1. **Multiplication (*): Multiplies two values (e.g., a * b). 1. Division (/): Divides one value by another (e.g., a / b). 1. Modulus (%%): Returns the remainder of division (e.g., a % b). 1. Exponentiation (^): Raises a value to the power of another (e.g., a  b).\n\n# Addition.\n50 + 100\n\n150\n\n\n\n# Subtraction.\n50 - 100\n\n-50\n\n\n\n# Multiplication (*).\n50 * 100\n\n5000\n\n\n\n# Divison (/).\n100 / 50\n\n2\n\n\n\n# Modulus -- For modulus in R we use two percent signs (%%).\n100 %% 50\n\n0\n\n\n\n# Exponential (^).\n50 ^ 100\n\n7.88860905221012e+169\n\n\n\n\n\n\nComparison operators in programming are used to compare two values or expressions. These operators return a logical value (TRUE or FALSE) depending on whether the comparison is true or false. They are fundamental in decision-making structures like if statements, loops, and other control flow mechanisms.\n\n\n\nEqual to (==): Checks if two values are equal (e.g., a == b).\nNot equal to (!=): Checks if two values are not equal (e.g., a != b).\nGreater than (&gt;): Checks if one value is greater than another (e.g., a &gt; b).\nLess than (&lt;): Checks if one value is less than another (e.g., a &lt; b).\nGreater than or equal to (&gt;=): Checks if one value is greater than or equal to another (e.g., a &gt;= b).\nLess than or equal to (&lt;=): Checks if one value is less than or equal to another (e.g., a &lt;= b).\n\n\n# Equal to (==).\n50 == 50  # Output TRUE\n\nTRUE\n\n\n\n# Not Equal to (!=).\n50 != 50 # Output FALSE\n\nFALSE\n\n\n\n# Greater than (&gt;).\n100 &gt; 4 # Output TRUE\n\nTRUE\n\n\n\n# Less than (&lt;).\n100 &lt; 4 # Output FALSE\n\nFALSE\n\n\n\n# Greater than or equal to (&gt;=):\n50 &gt;= 49 # Output TRUE\n\nTRUE\n\n\n\n# Less than or equal to (&lt;=)\n49 &lt;= 100 # Output TRUE\n\nTRUE\n\n\n\n\n\n\nLogical operators are used in programming to perform logical operations, typically on boolean values (TRUE or FALSE). These operators are essential for decision-making and control flow in code, allowing you to combine and evaluate conditions.\n\n\n\nAND (&& or and): Returns true if both conditions are true (e.g., a && b or a and b).\nOR (|| or or): Returns true if at least one condition is true (e.g., a || b or a or b).\nNOT (! or not): Returns true if the condition is false (e.g., !a or not a).\n\n\n# AND  using single (&)\n(5 &gt; 2) & (5 &gt; 4) # Output True if both conditions are true.\n\nTRUE\n\n\n\n# AND using  double (&&)\n(5 &gt; 2) && (5 &gt; 4) # Output True if both conditions are true.\n\nTRUE\n\n\n\n# OR using single (|)\n(5 &gt; 2) | (5 &lt; 2) # Output True if at least one condition is true.\n\nTRUE\n\n\n\n# OR using double (||)\n(5 &gt; 2) || (5 &lt; 2) # Output True if at least one condition is true.\n\nTRUE\n\n\n\n# NOT (! or not)\n!TRUE   # Result: FALSE\n!FALSE  # Result: TRUE\n\n!c(TRUE, FALSE, TRUE)  # Result: FALSE TRUE FALSE\n\nFALSE\n\n\nTRUE\n\n\n\nFALSETRUEFALSE\n\n\n\n\n\n\nIn R, identity operators are used to test if two objects are the same object or have the same identity. This concept is different from equality operators, which test if two objects are equivalent in value. Identity operators are particularly useful for checking if two variables point to the same object in memory, which is more about object identity rather than object equality. ### Types of Identity Operators 1. Identical() Function: Tests if two R objects are exactly the same, both in terms of their value and attributes. It checks for identity, meaning that the two objects are considered the same if they have the same type, structure, and content.\n\nis() Function: Checks if an object is of a specified class. It’s more about checking the identity of an object’s class rather than its value.\n\n\n# using identical(x, y)\nx &lt;- c(1, 2, 3) \ny &lt;- c(1, 2, 3)\nz &lt;- x\n\nidentical(x, y)  # FALSE, because x and y are not the same object in memory\nidentical(x, z)  # TRUE, because x and z are the same object in memory\n\nTRUE\n\n\nTRUE\n\n\n\n# using is(x, class)\nx &lt;- 5\nis(x, \"numeric\")  # TRUE, because x is a numeric object\nis(x, \"integer\")  # FALSE, because x is not an integer\n\nTRUE\n\n\nFALSE\n\n\n\n\n\nIn R, membership operators are used to test if elements belong to a specific set or structure. They are useful for checking whether values are present within vectors, lists, or other data structures. Here are the main membership operators in R:\n\n%in% Operator: Tests if elements of one vector are present in another vector. This operator is used to check membership within a set.\nmatch() Function: Finds the positions of the first matches of a vector of elements in another vector. It returns the index positions where matches are found, or NA if no match is found.\n%in% vs. match(): %in% Operator: Checks if elements are present in a set and returns a logical vector. match() Function: Provides the position of the matches or NA if no match is found.\n\nSummary: %in% is used for membership testing, checking if elements are present in a set, and returns a logical vector and match() is used to find the index positions of matches and returns those positions or NA.\nBoth operators and functions are essential for data manipulation and querying in R, allowing you to efficiently handle and analyze your data.\n\n# Using %in%.\n# Defining  vectors.\nfruits &lt;- c(\"apple\", \"banana\", \"cherry\")\nmy_fruit &lt;- \"banana\"\nmy_fruits &lt;- c(\"apple\", \"orange\")\n\n# Checking if `my_fruit` is in `fruits`\nmy_fruit %in% fruits  # TRUE\n\n# Checking if elements in `my_fruits` are in `fruits`\nmy_fruits %in% fruits  # TRUE FALSE\n# Here, \"banana\" is in the fruits vector, so the result is TRUE. The vector my_fruits\n# contains \"apple\" (which is in fruits) and \"orange\" (which is not), so the result is TRUE FALSE.\n\nTRUE\n\n\n\nTRUEFALSE\n\n\n\n# Using match(x, table)\n# Defining  vectors\nfruits &lt;- c(\"apple\", \"banana\", \"cherry\")\nmy_fruits &lt;- c(\"banana\", \"cherry\", \"orange\")\n\n# Find positions of `my_fruits` in `fruits`\nmatch(my_fruits, fruits)  # 2 3 NA\n\n#Here, \"banana\" is the 2nd element in fruits, \n#\"cherry\" is the 3rd, and \"orange\" is not found, so it returns NA.\n\n\n23&lt;NA&gt;",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html#assignment-operators",
    "href": "R-Course/r_operations.html#assignment-operators",
    "title": "Operations",
    "section": "",
    "text": "Assignment operators in programming are used to assign values to variables. These operators store a value on the right side of the operator into the variable on the left side. In most programming languages, assignment operators not only assign values but also can perform arithmetic operations and then assign the result to a variable.\n\n\n\nSimple Assignment (=): Assigns a value to a variable (e.g., a = 5).\nAssignment with (&lt;-): Assigns a value to a variable (e.g., a &lt;- 5).\n\n\n# Simple Assignment using (&lt;-).\nnum &lt;- 20 \nprint(num)\n\n[1] 20\n\n\n\n# Assignment using (=).\nnum_1 = 25 # or num = 20 This will work in R\nprint(num_1)\n\n[1] 25\n\n\nNB: If you coming from another Programming language. its time to let you know that R doesnt have short hand syntax support so we can not use syntax like num = 1 then num +=1",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html#arithmetic-operators",
    "href": "R-Course/r_operations.html#arithmetic-operators",
    "title": "Operations",
    "section": "",
    "text": "Arithmetic operations in programming and mathematics involve performing basic calculations on numerical values. These operations are fundamental to many algorithms and data manipulations. Here’s a detailed definition and explanation of each.\n\n\nArithmetic Operations: 1. Addition (+): Combines two values (e.g., a + b). 1. Subtraction (-): Subtracts one value from another (e.g., a - b). 1. **Multiplication (*): Multiplies two values (e.g., a * b). 1. Division (/): Divides one value by another (e.g., a / b). 1. Modulus (%%): Returns the remainder of division (e.g., a % b). 1. Exponentiation (^): Raises a value to the power of another (e.g., a  b).\n\n# Addition.\n50 + 100\n\n150\n\n\n\n# Subtraction.\n50 - 100\n\n-50\n\n\n\n# Multiplication (*).\n50 * 100\n\n5000\n\n\n\n# Divison (/).\n100 / 50\n\n2\n\n\n\n# Modulus -- For modulus in R we use two percent signs (%%).\n100 %% 50\n\n0\n\n\n\n# Exponential (^).\n50 ^ 100\n\n7.88860905221012e+169",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html#comparison-operators",
    "href": "R-Course/r_operations.html#comparison-operators",
    "title": "Operations",
    "section": "",
    "text": "Comparison operators in programming are used to compare two values or expressions. These operators return a logical value (TRUE or FALSE) depending on whether the comparison is true or false. They are fundamental in decision-making structures like if statements, loops, and other control flow mechanisms.\n\n\n\nEqual to (==): Checks if two values are equal (e.g., a == b).\nNot equal to (!=): Checks if two values are not equal (e.g., a != b).\nGreater than (&gt;): Checks if one value is greater than another (e.g., a &gt; b).\nLess than (&lt;): Checks if one value is less than another (e.g., a &lt; b).\nGreater than or equal to (&gt;=): Checks if one value is greater than or equal to another (e.g., a &gt;= b).\nLess than or equal to (&lt;=): Checks if one value is less than or equal to another (e.g., a &lt;= b).\n\n\n# Equal to (==).\n50 == 50  # Output TRUE\n\nTRUE\n\n\n\n# Not Equal to (!=).\n50 != 50 # Output FALSE\n\nFALSE\n\n\n\n# Greater than (&gt;).\n100 &gt; 4 # Output TRUE\n\nTRUE\n\n\n\n# Less than (&lt;).\n100 &lt; 4 # Output FALSE\n\nFALSE\n\n\n\n# Greater than or equal to (&gt;=):\n50 &gt;= 49 # Output TRUE\n\nTRUE\n\n\n\n# Less than or equal to (&lt;=)\n49 &lt;= 100 # Output TRUE\n\nTRUE",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html#logical-operators",
    "href": "R-Course/r_operations.html#logical-operators",
    "title": "Operations",
    "section": "",
    "text": "Logical operators are used in programming to perform logical operations, typically on boolean values (TRUE or FALSE). These operators are essential for decision-making and control flow in code, allowing you to combine and evaluate conditions.\n\n\n\nAND (&& or and): Returns true if both conditions are true (e.g., a && b or a and b).\nOR (|| or or): Returns true if at least one condition is true (e.g., a || b or a or b).\nNOT (! or not): Returns true if the condition is false (e.g., !a or not a).\n\n\n# AND  using single (&)\n(5 &gt; 2) & (5 &gt; 4) # Output True if both conditions are true.\n\nTRUE\n\n\n\n# AND using  double (&&)\n(5 &gt; 2) && (5 &gt; 4) # Output True if both conditions are true.\n\nTRUE\n\n\n\n# OR using single (|)\n(5 &gt; 2) | (5 &lt; 2) # Output True if at least one condition is true.\n\nTRUE\n\n\n\n# OR using double (||)\n(5 &gt; 2) || (5 &lt; 2) # Output True if at least one condition is true.\n\nTRUE\n\n\n\n# NOT (! or not)\n!TRUE   # Result: FALSE\n!FALSE  # Result: TRUE\n\n!c(TRUE, FALSE, TRUE)  # Result: FALSE TRUE FALSE\n\nFALSE\n\n\nTRUE\n\n\n\nFALSETRUEFALSE",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html#identity-operators",
    "href": "R-Course/r_operations.html#identity-operators",
    "title": "Operations",
    "section": "",
    "text": "In R, identity operators are used to test if two objects are the same object or have the same identity. This concept is different from equality operators, which test if two objects are equivalent in value. Identity operators are particularly useful for checking if two variables point to the same object in memory, which is more about object identity rather than object equality. ### Types of Identity Operators 1. Identical() Function: Tests if two R objects are exactly the same, both in terms of their value and attributes. It checks for identity, meaning that the two objects are considered the same if they have the same type, structure, and content.\n\nis() Function: Checks if an object is of a specified class. It’s more about checking the identity of an object’s class rather than its value.\n\n\n# using identical(x, y)\nx &lt;- c(1, 2, 3) \ny &lt;- c(1, 2, 3)\nz &lt;- x\n\nidentical(x, y)  # FALSE, because x and y are not the same object in memory\nidentical(x, z)  # TRUE, because x and z are the same object in memory\n\nTRUE\n\n\nTRUE\n\n\n\n# using is(x, class)\nx &lt;- 5\nis(x, \"numeric\")  # TRUE, because x is a numeric object\nis(x, \"integer\")  # FALSE, because x is not an integer\n\nTRUE\n\n\nFALSE",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_operations.html#membership-operators",
    "href": "R-Course/r_operations.html#membership-operators",
    "title": "Operations",
    "section": "",
    "text": "In R, membership operators are used to test if elements belong to a specific set or structure. They are useful for checking whether values are present within vectors, lists, or other data structures. Here are the main membership operators in R:\n\n%in% Operator: Tests if elements of one vector are present in another vector. This operator is used to check membership within a set.\nmatch() Function: Finds the positions of the first matches of a vector of elements in another vector. It returns the index positions where matches are found, or NA if no match is found.\n%in% vs. match(): %in% Operator: Checks if elements are present in a set and returns a logical vector. match() Function: Provides the position of the matches or NA if no match is found.\n\nSummary: %in% is used for membership testing, checking if elements are present in a set, and returns a logical vector and match() is used to find the index positions of matches and returns those positions or NA.\nBoth operators and functions are essential for data manipulation and querying in R, allowing you to efficiently handle and analyze your data.\n\n# Using %in%.\n# Defining  vectors.\nfruits &lt;- c(\"apple\", \"banana\", \"cherry\")\nmy_fruit &lt;- \"banana\"\nmy_fruits &lt;- c(\"apple\", \"orange\")\n\n# Checking if `my_fruit` is in `fruits`\nmy_fruit %in% fruits  # TRUE\n\n# Checking if elements in `my_fruits` are in `fruits`\nmy_fruits %in% fruits  # TRUE FALSE\n# Here, \"banana\" is in the fruits vector, so the result is TRUE. The vector my_fruits\n# contains \"apple\" (which is in fruits) and \"orange\" (which is not), so the result is TRUE FALSE.\n\nTRUE\n\n\n\nTRUEFALSE\n\n\n\n# Using match(x, table)\n# Defining  vectors\nfruits &lt;- c(\"apple\", \"banana\", \"cherry\")\nmy_fruits &lt;- c(\"banana\", \"cherry\", \"orange\")\n\n# Find positions of `my_fruits` in `fruits`\nmatch(my_fruits, fruits)  # 2 3 NA\n\n#Here, \"banana\" is the 2nd element in fruits, \n#\"cherry\" is the 3rd, and \"orange\" is not found, so it returns NA.\n\n\n23&lt;NA&gt;",
    "crumbs": [
      "R-Course",
      "Operations"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html",
    "href": "R-Course/r_overview.html",
    "title": "Introduction to R programming",
    "section": "",
    "text": "Welcome to this R programming tutorial! R is a powerful tool for statistical analysis and data science, and best of all—it’s free and open-source.\nBuilt with statisticians and data scientists in mind, R is ideal for statistical computing, data analysis, and handling large datasets. It’s cross-platform, running on Windows, macOS, and Linux, and can be integrated with big data tools like Hadoop and databases.\nOne of R’s strengths is data visualization. Whether you need static or interactive visualizations, R provides extensive customization through packages like ggplot2 and plotly. Plus, CRAN (the Comprehensive R Archive Network) offers over 18,000 packages, expanding R’s capabilities.\nWith a strong, active community, you’ll find plenty of support as you explore R’s features. So, let’s dive in and see what R can do!",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html#introduction-to-r-programming",
    "href": "R-Course/r_overview.html#introduction-to-r-programming",
    "title": "Introduction to R programming",
    "section": "",
    "text": "Welcome to this R programming tutorial! R is a powerful tool for statistical analysis and data science, and best of all—it’s free and open-source.\nBuilt with statisticians and data scientists in mind, R is ideal for statistical computing, data analysis, and handling large datasets. It’s cross-platform, running on Windows, macOS, and Linux, and can be integrated with big data tools like Hadoop and databases.\nOne of R’s strengths is data visualization. Whether you need static or interactive visualizations, R provides extensive customization through packages like ggplot2 and plotly. Plus, CRAN (the Comprehensive R Archive Network) offers over 18,000 packages, expanding R’s capabilities.\nWith a strong, active community, you’ll find plenty of support as you explore R’s features. So, let’s dive in and see what R can do!",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html#installing-r-and-rstudio",
    "href": "R-Course/r_overview.html#installing-r-and-rstudio",
    "title": "Introduction to R programming",
    "section": "Installing R and RStudio",
    "text": "Installing R and RStudio\nTo get started, you’ll need to install R, which sets up the language on your computer. However, for coding and managing your projects, we recommend using RStudio, a popular IDE designed for R.\nThe R is freely available for Windows, Mac and Linux operating systems from the Comprehensive R Archive Network (CRAN) website and R studio is available free for download at Rstudio-desktop\nMake your way to the Comprehensive R Archive Network (CRAN) website and you will be greeted with the following page below\n\nChoose the operating system that your using or your planning to install R on and follow along as below\n\n1. Windows installation\nAssuming you have made you way to the Comprehensive R Archive Network (CRAN) website.\nSelect the “Download R for windows option” as shown by the Arrow below in the image\n\nAfter making the above selection, you will be brought to the next page below. Now click on “install R for the first time” which will take you to the next page.\n\nThis show be on your screen as shown below, all thats left to do is click on “Download R for Windows”, This should start your download of R.\nSelect a path to where you would like to download your R install exe\nPlease keep in mind to install an R version compatible with your system\n\nAfter the download is complete you can browse to your downloads and find the R.exe downloaded file and open it to run it as seen in the images below\n\nAfter it has launched, select your preferred language, accept the terms and conditions and follow the rest of the instructions given by the installer\n\nNOTE: i would recommend you leave the default R set path to prevent any issues that may arise if your change the installation directory\n\n\n\n2. macOS installation\nAssuming you have made you way to the Comprehensive R Archive Network (CRAN) website.\nTo install R on macOS, follow these steps:\n\nDownload the R Installer:\n\nVisit the Comprehensive R Archive Network (CRAN) website.\nClick on the link for the latest version of R for macOS.\nDownload the .pkg file.\n\nInstall R:\n\nOnce the download is complete, open the .pkg file.\nFollow the installation instructions to complete the process.\n\nVerify the Installation:\n\nOpen the Terminal and type:\nR --version\nThis will display the installed R version, confirming the installation was successful.\n\n\n\n\n3. Linux installation\nAssuming you have made you way to the Comprehensive R Archive Network (CRAN) website.\nTo install R on a Linux distribution like Ubuntu, follow these steps:\n\nUpdate the Package List:\nOpen your terminal and run\nsudo apt-get update\nInstall the base R system using the following command:\n\nsudo apt-get install r-base\n\nVerify the Installation:\nR --version",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html#installing-rstudio",
    "href": "R-Course/r_overview.html#installing-rstudio",
    "title": "Introduction to R programming",
    "section": "Installing Rstudio",
    "text": "Installing Rstudio\n\nInstalling RStudio on Linux, macOS, and Windows\nAfter installing R, you can install RStudio, an Integrated Development Environment (IDE) for R. Follow the steps for your specific operating system. The website Auto detects your system and offers you the right package for your machine\n\n1. Installing RStudio on Linux\n\nDownload RStudio :\n\nVisit the RStudio Download Page.\n\n\n\nScroll down to the RStudio Desktop section and select the version for Linux (e.g., .deb or .rpm file).\n\nInstall RStudio:\n\nFor Ubuntu or Debian-based distributions, use:\nsudo dpkg -i rstudio-x.y.z-amd64.deb\nReplace x.y.z with the version number you downloaded.\nFor Red Hat or Fedora-based distributions, use:\nsudo yum install rstudio-x.y.z-x86_64.rpm\n\nLaunch RStudio:\n\nOpen RStudio from the terminal by typing rstudio, or find it in your application menu.\n\n\n\n\n2. Installing RStudio on macOS\n\nDownload RStudio:\n\nGo to the RStudio Download Page.\nSelect the version for macOS and download the .dmg file.\n\nInstall RStudio:\n\nOpen the downloaded .dmg file.\nDrag the RStudio icon into your Applications folder.\n\nLaunch RStudio:\n\nGo to your Applications folder and double-click on the RStudio icon to start.\n\n\n\n\n3. Installing RStudio on Windows\n\nDownload RStudio:\n\nGo to the RStudio Download Page.\nSelect the version for Windows and download the .exe file.\n\nInstall RStudio:\n\nRun the downloaded .exe file.\nFollow the installation instructions to complete the setup.\n\nLaunch RStudio:\n\nAfter installation, you can find RStudio in your Start Menu. Click to open it.\n\n\nYou’re now ready to start coding in R with RStudio!",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html#variables-in-r-are-created-using-the---operator-or-operator.-r-is-case-sensitive.",
    "href": "R-Course/r_overview.html#variables-in-r-are-created-using-the---operator-or-operator.-r-is-case-sensitive.",
    "title": "Introduction to R programming",
    "section": "1. Variables in R are created using the <- operator or = operator. R is case-sensitive.",
    "text": "1. Variables in R are created using the &lt;- operator or = operator. R is case-sensitive.\n\nx &lt;- 10  # Using the &lt;- operator\ny = 20    # Using the = operator",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html#data-types",
    "href": "R-Course/r_overview.html#data-types",
    "title": "Introduction to R programming",
    "section": "2. Data Types",
    "text": "2. Data Types\nR supports several data types Numeric: Represents real numbers Integer: Represents whole numbers (use L suffix). Character: Represents text. Logical: Represents boolean values (TRUE or FALSE).\n\n# This is a numeric\nnum &lt;- 3.14 \nprint(num)\n# This is an int\nint_num &lt;- 42L \nprint(int_num)\n# This is a character\ntext &lt;- \"Hello, R!\"\nprint(text) \n# this is a logical \nflag &lt;- TRUE\nprint(flag)\n\n[1] 3.14\n[1] 42\n[1] \"Hello, R!\"\n[1] TRUE",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "R-Course/r_overview.html#basic-math-operations",
    "href": "R-Course/r_overview.html#basic-math-operations",
    "title": "Introduction to R programming",
    "section": "3. Basic Math Operations",
    "text": "3. Basic Math Operations\nR supports standard mathematical operations: Let x be 2 and y be 4.\n\n# Assigning the values.\nx &lt;- 2\ny &lt;- 4\n\nAddition: +\n\n# adding x and y\nsum &lt;- x + y\nprint(sum)\n\n[1] 6\n\n\nSubtraction: -\n\n# getting there difference\ndifference &lt;- x - y\nprint(difference)\n\n[1] -2\n\n\nMultiplication: *\n\n# getting there product\nproduct &lt;- x * y\nprint(product)\n\n[1] 8\n\n\nDivision: /\n\n# dividing the two numbers\nquotient &lt;- x / y\nprint(quotient)\n\n[1] 0.5\n\n\nExponentiation: ^\n\n# raising x to the exponent of 2\npower &lt;- x ^ 2\nprint(power)\n\n[1] 4\n\n\nModulus: %% (remainder after division)\n\n# finding the remainder for the divison of x by y\nremainder &lt;- x %% y\nprint(remainder)\n\n[1] 2",
    "crumbs": [
      "R-Course",
      "Introduction to R programming"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to DATAIDEA",
    "section": "",
    "text": "Programming for Data Science with R\n\n\n\n\n\n\nThis subject offers a structured path to mastering the tools and techniques that drive data-driven decision-making in today’s industries. Whether you are a beginner looking to start your journey or an experienced professional aiming to deepen your expertise, this course has something for everyone.\n\n\n\n\n\n\n\n\n\nWhat You Will Learn\n\n\n\n\n\n\n\nR Programming Fundamentals\n\n\nStart with the basics of R, a versatile and powerful programming language. This course lays the foundation for your data science journey \n\n\n\n \n\n\n\n\nR Data Analysis\n\n\nExplore data analysis using various libraries. Learn to transform raw data into actionable insights \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Choose This Course?\n\n\n\nHands-On Learning: Each module is designed with practical exercises and real-world projects to ensure you can apply what you’ve learned.\n\n\nFlexible Learning Path: Choose to follow the entire course or focus on specific modules that meet your individual learning goals.\n\n\nExpert Guidance: Gain insights from industry professionals who are passionate about data science and dedicated to your success.\n\n\nCareer-Ready Skills: By the end of this course, you’ll be ready to tackle data science challenges, whether you’re transitioning careers or enhancing your current role.\n\n\n\n\n\n\n\n\n Don’t Miss Any Updates!\n\n\n\n\nBefore we continue, we have a humble request, to be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Welcome to DATAIDEA"
    ]
  },
  {
    "objectID": "R-Course/r_collections.html",
    "href": "R-Course/r_collections.html",
    "title": "Collections",
    "section": "",
    "text": "A data structure is a fundamental building block in computer science. It serves as a way to organize, store, and manipulate data within a program.\nThink of data structures as the blueprints for how data is arranged and accessed efficiently. They not only store actual data values but also maintain information about relationships among those values.\nData structures determine how data is laid out in memory or stored.They define the functions or operations that can be applied to the data (e.g., adding, searching, deleting).\n\n\nThe Data structures in R are as follows below:\n\n\nA vector in R is a one-dimensional data structure that holds elements of the same type. Think of it as an ordered collection of values grouped together into a single container.\nEach value in a vector is called a component, and vectors can store various types of data, including numeric values, logical values, or character strings.\nImportantly, vectors are not recursive, meaning they can’t contain other vectors as elements. They’re simple and straightforward—one type of data, one dimension.\nTo create a vector in R, we often use the c() function (which stands for “combine” or “concatenate”). Here are some examples:\n\n# Creating vector of string type have employee names\nemployees &lt;- c(\"Sabby\", \"Cathy\", \"Lucy\")\nprint(employees) # Output Entire Employees vector\n\n[1] \"Sabby\" \"Cathy\" \"Lucy\" \n\n\n\n# Creating a vector of numeric type.\nnumbers &lt;- c(1, 1, 2, 3, 4, 7, 9, 3)\nprint(numbers) # Output Entire numbers vector\n\n[1] 1 1 2 3 4 7 9 3\n\n\nYou can Access Vector Elements by indexing: Each element in a vector is associated with an index (starting from 1). You can access elements using these indices.(Yes R is 1 based indexing language).\nForexample lets assume we have a vector of fruits and we would like to access the element “Apple” in it. see code below\n\n# Defining the fruit vec.\nfruit_vec &lt;- c(\"Oranges\", \"Pears\", \"Lemons\", \"Apples\", \"Strawberries\")\n# if you count \"Apples\" is in the fouth position therefore lets index the fourth position.\nfruit_vec[4] # Output is \"Apples\" because its in the fourth position.\n\n'Apples'\n\n\n\n# Say we are now interested in \"Lemons\" instead\n# lets index them out of the vector\n\nfruit_vec[3] # Output Lemons\n\n'Lemons'\n\n\n\n# Say we are now interested in getting two items or more forexample from \"pears\" to \"strawberries\".\n# we can index the Vector the same way only change is the position we say use a range.\n# Why we if you look pears is in the second position and strawberries the fifth, therefore we \n# tell R we want the range 2 to 5 and we say that in R by using a colon \":\". ---&gt; 2:5\nfruit_vec[2:5]\n\n\n'Pears''Lemons''Apples''Strawberries'\n\n\n\n\n\nA list in R is an ordered collection of objects, known as its components. Unlike vectors or matrices, lists can contain elements of different modes or types. In other words, a list can hold a mix of numeric vectors, logical values, matrices, character arrays, functions, and more.\nThink of a list as a flexible container where each component can be anything—an atomic value, a vector, or even another list.\nTo create a list in R, you use the list() function. You can include any number of components separated by commas within the function call. Here are some examples:\n\n# Creating list with different data types\nitems &lt;- list(\"Dog\", 24, 32, 56)\nprint(items) # Output Entire list\n\n[[1]]\n[1] \"Dog\"\n\n[[2]]\n[1] 24\n\n[[3]]\n[1] 32\n\n[[4]]\n[1] 56\n\n\n\n\n# Creating a list with similar data types (numeric)\nlist_1 &lt;- list(24, 29, 32, 34)\nprint(list_1) # Output Entire list\n\n[[1]]\n[1] 24\n\n[[2]]\n[1] 29\n\n[[3]]\n[1] 32\n\n[[4]]\n[1] 34\n\n\n\nYou can access components of a list in two ways: 1. By Names: Naming list components makes it easier to access them. Use the dollar sign ($) followed by the component name.\n\n# By Name.\nmy_named_list &lt;- list(name = \"Chris\",\n                    age = 25, city = \"NewYork\")\nprint(my_named_list$name)  # Output: \"Chris\"\n\n[1] \"Chris\"\n\n\nNB: Naming components not only helps with readability but also simplifies access. You can use descriptive names for each component.\n\nBy Indices: Just like seen above in vectors you can access list components the same way\n\n\n# Assuming we have some employees\nemp_names &lt;- c(\"Mike\", \"Bob\", \"John\", \"Annet\")\nprint(emp_names[2])  # Output: \"Bob\"\n\n[1] \"Bob\"\n\n\nUse Cases 1. Storing complex data structures (e.g., nested lists for hierarchical data). 1. Representing results from statistical models. Holding mixed data types when a data frame isn’t suitable.\nNB: Lists are your Swiss Army knife in R, they’re flexible, adaptable, and essential for handling diverse data.\n\n\n\nA matrix in R is a rectangular arrangement of data with rows and columns. It’s similar to a vector but has an additional dimension attribute. Each element in a matrix is associated with both a row index and a column index.\nUnlike lists, matrices are homogeneous, meaning they can only contain elements of the same data type (e.g., all numeric, all character strings, etc.).\nThink of a matrix as a grid where each cell holds a value. Rows run horizontally, and columns run vertically.\nTo create a matrix, you use the matrix() function.\n\n# Creating a 3x3 matrix with specified elements\nmy_matrix &lt;- matrix(\n  c(1, 2, 3, 4, 5, 6, 7, 8, 9),\n  nrow = 3,  # Number of rows\n  ncol = 3,  # Number of columns\n  byrow = TRUE  # Arrange elements by rows (optional)\n)\nprint(my_matrix)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\nAccessing Matrix Elements: You can access individual elements using row and column indices\n\n# Accessing the element in the second row, third column\nmy_value &lt;- my_matrix[2, 3]  # Value: 6\nprint(my_value)\n\n[1] 6\n\n\nYou can query information about a matrix using the Functions below: 1. Number of rows: nrow(my_matrix) 1. Number of columns: ncol(my_matrix) 1. Dimensions: dim(my_matrix)\n\n# Finding Number of Rows of my_matrix.\nnrow(my_matrix)\n\n3\n\n\n\n# Finding Number of Columns of my_matrix.\nncol(my_matrix)\n\n3\n\n\n\n# Finding the Dimension/Order of my_matrix.\ndim(my_matrix)\n\n\n33\n\n\nUse case: Matrices are handy for representing data tables, mathematical operations (e.g., linear algebra), and image processing.\n\n\n\nA data frame in R is like a spreadsheet or a table—a two-dimensional structure where rows represent observations (cases) and columns represent variables (attributes).\nTechnically, data frames are lists of vectors of equal length. Each column can contain different types of variables (numeric, character, logical, etc.).\nThink of a data frame as a versatile container for structured data, commonly used for data analysis, statistical modeling, and data visualization.\nYou can create a data frame using the data.frame() function. Here’s an example:\n\n# Creating a simple data frame\n# In this example, lets created a data frame with three columns: “Name,” “Age,” and “Score.”\n\nmy_data_frame &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"), # notice this is a vector.\n  Age = c(25, 30, 22), # notice this is a vector.\n  Score = c(85, 92, 78) # notice this is a vector.\n)\nmy_data_frame # You may need to print this out if your using Rstudio i.e print(my_data_frame)\n\n\nA data.frame: 3 × 3\n\n\nName\nAge\nScore\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n25\n85\n\n\nBob\n30\n92\n\n\nCharlie\n22\n78\n\n\n\n\n\nYou can access columns (variables) from a data frame using different methods: 1. By column name (using $ notation) 2. By column index (using single brackets [ ])\n\n# Using column name (using $ notation)\nmy_data_frame$Name\n\n\n'Alice''Bob''Charlie'\n\n\n\n# Using column index (using single brackets [ ])\nmy_data_frame[,1]\n\n\n'Alice''Bob''Charlie'\n\n\n\n# use can also access them using brackets and there column name\nmy_data_frame[\"Name\"] # Coming from python this look very familiar.\n\n\nA data.frame: 3 × 1\n\n\nName\n\n\n&lt;chr&gt;\n\n\n\n\nAlice\n\n\nBob\n\n\nCharlie\n\n\n\n\n\nAdding Rows and Columns 1. To add new rows, use the rbind() function.\n\n# Adding a new row to my_data_frame\nnew_row &lt;- c(\"David\", 28, 91) # New row to add\nupdated_data_frame &lt;- rbind(my_data_frame, new_row)\nupdated_data_frame # Remeber you may need to wrap that in print.\n\n\nA data.frame: 4 × 3\n\n\nName\nAge\nScore\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\nAlice\n25\n85\n\n\nBob\n30\n92\n\n\nCharlie\n22\n78\n\n\nDavid\n28\n91\n\n\n\n\n\n\nTo add new columns, use the cbind() function.\n\n\n# Add a new column\nnew_column &lt;- c(88, 76, 95) # New column to add\nupdated_data_frame &lt;- cbind(my_data_frame, Exam2 = new_column)\nupdated_data_frame\n\n\nA data.frame: 3 × 4\n\n\nName\nAge\nScore\nExam2\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n25\n85\n88\n\n\nBob\n30\n92\n76\n\n\nCharlie\n22\n78\n95\n\n\n\n\n\nRemoving Rows and Columns 1. To remove rows or columns, you can use indexing.\n\n# Remove the second row\nreduced_data_frame &lt;- my_data_frame[-2, ]\n\n# Remove the \"Score\" column\nreduced_data_frame &lt;- my_data_frame[, -3]\n\nreduced_data_frame\n\n\nA data.frame: 3 × 2\n\n\nName\nAge\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n25\n\n\nBob\n30\n\n\nCharlie\n22\n\n\n\n\n\nNB: Data Frames have a lot more methods than we can cover in this simple tutorial. Find more about them in our R programming Course.\nBonus tip: All the matrix methods dim(), nrow(), or ncol() work on data frames.",
    "crumbs": [
      "R-Course",
      "Collections"
    ]
  },
  {
    "objectID": "R-Course/r_collections.html#introduction-to-data-structures",
    "href": "R-Course/r_collections.html#introduction-to-data-structures",
    "title": "Collections",
    "section": "",
    "text": "A data structure is a fundamental building block in computer science. It serves as a way to organize, store, and manipulate data within a program.\nThink of data structures as the blueprints for how data is arranged and accessed efficiently. They not only store actual data values but also maintain information about relationships among those values.\nData structures determine how data is laid out in memory or stored.They define the functions or operations that can be applied to the data (e.g., adding, searching, deleting).\n\n\nThe Data structures in R are as follows below:\n\n\nA vector in R is a one-dimensional data structure that holds elements of the same type. Think of it as an ordered collection of values grouped together into a single container.\nEach value in a vector is called a component, and vectors can store various types of data, including numeric values, logical values, or character strings.\nImportantly, vectors are not recursive, meaning they can’t contain other vectors as elements. They’re simple and straightforward—one type of data, one dimension.\nTo create a vector in R, we often use the c() function (which stands for “combine” or “concatenate”). Here are some examples:\n\n# Creating vector of string type have employee names\nemployees &lt;- c(\"Sabby\", \"Cathy\", \"Lucy\")\nprint(employees) # Output Entire Employees vector\n\n[1] \"Sabby\" \"Cathy\" \"Lucy\" \n\n\n\n# Creating a vector of numeric type.\nnumbers &lt;- c(1, 1, 2, 3, 4, 7, 9, 3)\nprint(numbers) # Output Entire numbers vector\n\n[1] 1 1 2 3 4 7 9 3\n\n\nYou can Access Vector Elements by indexing: Each element in a vector is associated with an index (starting from 1). You can access elements using these indices.(Yes R is 1 based indexing language).\nForexample lets assume we have a vector of fruits and we would like to access the element “Apple” in it. see code below\n\n# Defining the fruit vec.\nfruit_vec &lt;- c(\"Oranges\", \"Pears\", \"Lemons\", \"Apples\", \"Strawberries\")\n# if you count \"Apples\" is in the fouth position therefore lets index the fourth position.\nfruit_vec[4] # Output is \"Apples\" because its in the fourth position.\n\n'Apples'\n\n\n\n# Say we are now interested in \"Lemons\" instead\n# lets index them out of the vector\n\nfruit_vec[3] # Output Lemons\n\n'Lemons'\n\n\n\n# Say we are now interested in getting two items or more forexample from \"pears\" to \"strawberries\".\n# we can index the Vector the same way only change is the position we say use a range.\n# Why we if you look pears is in the second position and strawberries the fifth, therefore we \n# tell R we want the range 2 to 5 and we say that in R by using a colon \":\". ---&gt; 2:5\nfruit_vec[2:5]\n\n\n'Pears''Lemons''Apples''Strawberries'\n\n\n\n\n\nA list in R is an ordered collection of objects, known as its components. Unlike vectors or matrices, lists can contain elements of different modes or types. In other words, a list can hold a mix of numeric vectors, logical values, matrices, character arrays, functions, and more.\nThink of a list as a flexible container where each component can be anything—an atomic value, a vector, or even another list.\nTo create a list in R, you use the list() function. You can include any number of components separated by commas within the function call. Here are some examples:\n\n# Creating list with different data types\nitems &lt;- list(\"Dog\", 24, 32, 56)\nprint(items) # Output Entire list\n\n[[1]]\n[1] \"Dog\"\n\n[[2]]\n[1] 24\n\n[[3]]\n[1] 32\n\n[[4]]\n[1] 56\n\n\n\n\n# Creating a list with similar data types (numeric)\nlist_1 &lt;- list(24, 29, 32, 34)\nprint(list_1) # Output Entire list\n\n[[1]]\n[1] 24\n\n[[2]]\n[1] 29\n\n[[3]]\n[1] 32\n\n[[4]]\n[1] 34\n\n\n\nYou can access components of a list in two ways: 1. By Names: Naming list components makes it easier to access them. Use the dollar sign ($) followed by the component name.\n\n# By Name.\nmy_named_list &lt;- list(name = \"Chris\",\n                    age = 25, city = \"NewYork\")\nprint(my_named_list$name)  # Output: \"Chris\"\n\n[1] \"Chris\"\n\n\nNB: Naming components not only helps with readability but also simplifies access. You can use descriptive names for each component.\n\nBy Indices: Just like seen above in vectors you can access list components the same way\n\n\n# Assuming we have some employees\nemp_names &lt;- c(\"Mike\", \"Bob\", \"John\", \"Annet\")\nprint(emp_names[2])  # Output: \"Bob\"\n\n[1] \"Bob\"\n\n\nUse Cases 1. Storing complex data structures (e.g., nested lists for hierarchical data). 1. Representing results from statistical models. Holding mixed data types when a data frame isn’t suitable.\nNB: Lists are your Swiss Army knife in R, they’re flexible, adaptable, and essential for handling diverse data.\n\n\n\nA matrix in R is a rectangular arrangement of data with rows and columns. It’s similar to a vector but has an additional dimension attribute. Each element in a matrix is associated with both a row index and a column index.\nUnlike lists, matrices are homogeneous, meaning they can only contain elements of the same data type (e.g., all numeric, all character strings, etc.).\nThink of a matrix as a grid where each cell holds a value. Rows run horizontally, and columns run vertically.\nTo create a matrix, you use the matrix() function.\n\n# Creating a 3x3 matrix with specified elements\nmy_matrix &lt;- matrix(\n  c(1, 2, 3, 4, 5, 6, 7, 8, 9),\n  nrow = 3,  # Number of rows\n  ncol = 3,  # Number of columns\n  byrow = TRUE  # Arrange elements by rows (optional)\n)\nprint(my_matrix)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\nAccessing Matrix Elements: You can access individual elements using row and column indices\n\n# Accessing the element in the second row, third column\nmy_value &lt;- my_matrix[2, 3]  # Value: 6\nprint(my_value)\n\n[1] 6\n\n\nYou can query information about a matrix using the Functions below: 1. Number of rows: nrow(my_matrix) 1. Number of columns: ncol(my_matrix) 1. Dimensions: dim(my_matrix)\n\n# Finding Number of Rows of my_matrix.\nnrow(my_matrix)\n\n3\n\n\n\n# Finding Number of Columns of my_matrix.\nncol(my_matrix)\n\n3\n\n\n\n# Finding the Dimension/Order of my_matrix.\ndim(my_matrix)\n\n\n33\n\n\nUse case: Matrices are handy for representing data tables, mathematical operations (e.g., linear algebra), and image processing.\n\n\n\nA data frame in R is like a spreadsheet or a table—a two-dimensional structure where rows represent observations (cases) and columns represent variables (attributes).\nTechnically, data frames are lists of vectors of equal length. Each column can contain different types of variables (numeric, character, logical, etc.).\nThink of a data frame as a versatile container for structured data, commonly used for data analysis, statistical modeling, and data visualization.\nYou can create a data frame using the data.frame() function. Here’s an example:\n\n# Creating a simple data frame\n# In this example, lets created a data frame with three columns: “Name,” “Age,” and “Score.”\n\nmy_data_frame &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"), # notice this is a vector.\n  Age = c(25, 30, 22), # notice this is a vector.\n  Score = c(85, 92, 78) # notice this is a vector.\n)\nmy_data_frame # You may need to print this out if your using Rstudio i.e print(my_data_frame)\n\n\nA data.frame: 3 × 3\n\n\nName\nAge\nScore\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n25\n85\n\n\nBob\n30\n92\n\n\nCharlie\n22\n78\n\n\n\n\n\nYou can access columns (variables) from a data frame using different methods: 1. By column name (using $ notation) 2. By column index (using single brackets [ ])\n\n# Using column name (using $ notation)\nmy_data_frame$Name\n\n\n'Alice''Bob''Charlie'\n\n\n\n# Using column index (using single brackets [ ])\nmy_data_frame[,1]\n\n\n'Alice''Bob''Charlie'\n\n\n\n# use can also access them using brackets and there column name\nmy_data_frame[\"Name\"] # Coming from python this look very familiar.\n\n\nA data.frame: 3 × 1\n\n\nName\n\n\n&lt;chr&gt;\n\n\n\n\nAlice\n\n\nBob\n\n\nCharlie\n\n\n\n\n\nAdding Rows and Columns 1. To add new rows, use the rbind() function.\n\n# Adding a new row to my_data_frame\nnew_row &lt;- c(\"David\", 28, 91) # New row to add\nupdated_data_frame &lt;- rbind(my_data_frame, new_row)\nupdated_data_frame # Remeber you may need to wrap that in print.\n\n\nA data.frame: 4 × 3\n\n\nName\nAge\nScore\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\nAlice\n25\n85\n\n\nBob\n30\n92\n\n\nCharlie\n22\n78\n\n\nDavid\n28\n91\n\n\n\n\n\n\nTo add new columns, use the cbind() function.\n\n\n# Add a new column\nnew_column &lt;- c(88, 76, 95) # New column to add\nupdated_data_frame &lt;- cbind(my_data_frame, Exam2 = new_column)\nupdated_data_frame\n\n\nA data.frame: 3 × 4\n\n\nName\nAge\nScore\nExam2\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n25\n85\n88\n\n\nBob\n30\n92\n76\n\n\nCharlie\n22\n78\n95\n\n\n\n\n\nRemoving Rows and Columns 1. To remove rows or columns, you can use indexing.\n\n# Remove the second row\nreduced_data_frame &lt;- my_data_frame[-2, ]\n\n# Remove the \"Score\" column\nreduced_data_frame &lt;- my_data_frame[, -3]\n\nreduced_data_frame\n\n\nA data.frame: 3 × 2\n\n\nName\nAge\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nAlice\n25\n\n\nBob\n30\n\n\nCharlie\n22\n\n\n\n\n\nNB: Data Frames have a lot more methods than we can cover in this simple tutorial. Find more about them in our R programming Course.\nBonus tip: All the matrix methods dim(), nrow(), or ncol() work on data frames.",
    "crumbs": [
      "R-Course",
      "Collections"
    ]
  },
  {
    "objectID": "R-Course/r_collections.html#exercise",
    "href": "R-Course/r_collections.html#exercise",
    "title": "Collections",
    "section": "Exercise",
    "text": "Exercise\n\nLists: Create a list containing the following components\n\nA vector of your favorite colors (e.g., “red,” “green,” “blue”).\nYour age (as a numeric value).\nA logical value indicating whether you like coffee (e.g., TRUE or FALSE).\n\nVectors: Create a numeric vector representing the temperatures (in Celsius) for a week\n\nMonday: 25°C\nTuesday: 28°C\nWednesday: 24°C\n\nMatrices: Create a 3x3 matrix representing a simple multiplication table\n\nEach cell (i, j) contains the product of i and j.\n\nData Frames: Create a data frame with information about fictional employees\n\nColumns: “Name,” “Age,” “Salary.”\nAdd at least three rows of data",
    "crumbs": [
      "R-Course",
      "Collections"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html",
    "href": "R-Course/r_variables.html",
    "title": "Introduction to Variables",
    "section": "",
    "text": "In R: - A variable in R is used to store data that you want to work with. - You can assign a value to a variable using the assignment operator “&lt;-” or “=”. - Once a variable is assigned a value, you can use the variable name to refer to that value in your code\n\n# Example 1 using assignment operator \"&lt;-\".\nnum_1 &lt;- 1  # Assigning value 1 to variable num_1.\nprint(num_1) # Prints out what the variable num_1 contains.\n\n[1] 1\n\n\nIn the above code we see that now num_1 is assigned to the value of 1 therefore anywhere in our code we refer to “num_1” the 1 is whats being referenced.\n\n# Example 2 using assignment operator \"=\".\nnum_2 = 3  # Assigning value of 3 to variable num_2.\nprint(num_2) # Prints out what the variable num_1 contains.\n\n[1] 3\n\n\nIn the above code we see that now num_2 is assigned to the value of 3. Therefore anywhere in our code we refer to “num_2” the 3 is whats being referenced. With this knowledge in mind so if num_1 is 1 and num_2 is 3 then num_1 plus num_3 should equal to 1 + 3 which equals to 4 . Lets test this out below and see what we end up with.\n\n# Testing above theory that num_1 + num_2 = 4 since num_1 = 1 and num_2 = 3.\n# Adding num1 and num_2 putting the outcome of the operation into a variable called results.\nresults &lt;- num_1 + num_2  \nprint(results)  # printing out the results.\n\n[1] 4\n\n\nLook at that we get a Four as the answer, this proves the concept of variables being containers for whatever we may like to store. Which brings us to the Question of “What Exactly can we store in a variable 🤔🤔?”.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#numeric-data",
    "href": "R-Course/r_variables.html#numeric-data",
    "title": "Introduction to Variables",
    "section": "1. Numeric Data",
    "text": "1. Numeric Data\n\nNumeric data in R refers to any data that represents numbers. This can include integers (whole numbers) and doubles (floating-point numbers or decimals).\nNumeric data is used for mathematical operations like addition, subtraction, multiplication, and division.\n\n\n# Numeric data.\nnum1 &lt;- 42       # Integer.\nnum2 &lt;- 3.14     # Decimal or floating-point number.\n\n# Performing operations with numeric data.\nsum &lt;- num1 + num2\nprint(sum)  # Outputs should be 45.14.\n\n[1] 45.14",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#character-data",
    "href": "R-Course/r_variables.html#character-data",
    "title": "Introduction to Variables",
    "section": "2. Character Data",
    "text": "2. Character Data\n\nCharacter data in R consists of text or strings. Strings are sequences of characters enclosed in either single or double quotes.\nCharacter data is often used for storing names, addresses, labels, or any other non-numeric information.\n\n\n# Character data.\ngreeting &lt;- \"Hello, World!\" # Using Double quotes.\nname &lt;- 'John Doe' # Using Single quotes.\n\nprint(paste(greeting, name))  # Outputs \"Hello, World! John Doe\"\n\n[1] \"Hello, World! John Doe\"",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#factor-data",
    "href": "R-Course/r_variables.html#factor-data",
    "title": "Introduction to Variables",
    "section": "3. Factor Data",
    "text": "3. Factor Data\n\nFactor data is used to represent categorical data, where the data can take on a limited number of distinct values or levels.\nFactors are useful for storing data that has a specific number of categories or a natural order to them, such as “Yes” and “No” or “Low”, “Medium”, and “High”.\nFactors are especially useful in statistical modeling and data analysis. To convert a data type to a factor we use the Factor() function as shown below\n\n\n# Factor data.\ndays &lt;- factor(c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Tuesday\", \"Monday\"))\n\n# Display the factor levels.\nprint(levels(days))  # Outputs \"Monday\" \"Tuesday\" \"Wednesday\"\n\n[1] \"Monday\"    \"Tuesday\"   \"Wednesday\"",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#logical-data",
    "href": "R-Course/r_variables.html#logical-data",
    "title": "Introduction to Variables",
    "section": "4. Logical Data",
    "text": "4. Logical Data\n\nLogical values in R represent TRUE or FALSE (often used in conditional statements and comparisons).\nLogical values are essential for control flow in programs, allowing you to execute different code depending on conditions.\n\n\n# Logical values.\nis_sunny &lt;- TRUE\nis_raining &lt;- FALSE",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#integers",
    "href": "R-Course/r_variables.html#integers",
    "title": "Introduction to Variables",
    "section": "5. Integers",
    "text": "5. Integers\n\nIntegers are whole numbers that do not have a fractional or decimal part. In R, integers are represented by the data type integer.\nYou can explicitly define an integer by appending an L to the number. By default, R treats numbers without a decimal as numeric (which are doubles), so adding the L ensures it is stored as an integer.\nYou can perform standard arithmetic operations with integers, just as you would with numeric data.\n\n\n# Defining an integer.\nx &lt;- 42L\n\n# Performing operations with integers.\ny &lt;- x * 2\nprint(y)  # Outputs: 84.\n\n[1] 84",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#complex-numbers",
    "href": "R-Course/r_variables.html#complex-numbers",
    "title": "Introduction to Variables",
    "section": "6. Complex Numbers",
    "text": "6. Complex Numbers\n\nComplex numbers consist of a real part and an imaginary part. In R, complex numbers are represented using the complex data type.\nThe imaginary unit is represented by i, and you can create a complex number by combining a real and an imaginary part.See code below\nComplex numbers support various operations like addition, subtraction, multiplication, and division. R also provides functions to extract the real Re() and imaginary Im() parts of a complex number.\n\n\n# Defining a complex number.\nz &lt;- 3 + 4i\n\n# Accessing the real and imaginary parts.\nreal_part &lt;- Re(z)  # Outputs: 3.\nimaginary_part &lt;- Im(z)  # Outputs: 4.\n\n# Performing operations with complex numbers.\nz_squared &lt;- z * z\nprint(z_squared)  # Outputs: -7 + 24i.\n\n[1] -7+24i",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#converting-numeric-to-character",
    "href": "R-Course/r_variables.html#converting-numeric-to-character",
    "title": "Introduction to Variables",
    "section": "1. Converting Numeric to Character",
    "text": "1. Converting Numeric to Character\nTo convert a Numeric to Character we call the as.character() function on the variable or Data type we are interested into converting.\nNB: Converisons work where the conversion makes sense thats to say i can convert a numeric number 5 into a character “5”. I could still convert the character “5” back into a Numeric number 5. But you can convert a character such as “a” into a Numeric.\nSee code below.\n\n##### Converting Numeric to Character. #####\nnum &lt;- 123 # start value.\n\n# Checking the type before conversion.\nprint(paste(\"Type before conversion:\", class(num))) \n\n# Converting type and saving it into variable num_char.\nnum_char &lt;- as.character(num)\n\n# Checking the type after conversion.\nprint(paste(\"Type after conversion:\", class(num_char)))\n\n# Printing out the converted start value.\nprint(num_char)  # Outputs \"123\"\n\n[1] \"Type before conversion: numeric\"\n[1] \"Type after conversion: character\"\n[1] \"123\"",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#converting-character-to-numeric",
    "href": "R-Course/r_variables.html#converting-character-to-numeric",
    "title": "Introduction to Variables",
    "section": "2. Converting Character to Numeric",
    "text": "2. Converting Character to Numeric\nTo convert a character into a Numeric we use the as.Numeric() function on the Variable we want to convert, see code below.\n\n##### Character to Numeric #####.\nchar &lt;- \"456\" # start value.\n\n# Checking the type before conversion.\nprint(paste(\"Type before conversion:\", class(char))) \n\n# Converting type and saving it into variable char_num.\nchar_num &lt;- as.numeric(char)\n\n# Checking the type after conversion.\nprint(paste(\"Type after conversion:\", class(char_num)))\n\n# Printing out the converted start value.\nprint(char_num)  # Outputs 456\n\n[1] \"Type before conversion: character\"\n[1] \"Type after conversion: numeric\"\n[1] 456",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#converting-numeric-to-factor",
    "href": "R-Course/r_variables.html#converting-numeric-to-factor",
    "title": "Introduction to Variables",
    "section": "3. Converting Numeric to Factor",
    "text": "3. Converting Numeric to Factor\nTo convert from a Numeric to a Factor we use the as.Factor() function.\n\n###### Numeric to Factor #####\ngrades &lt;- c(85, 90, 75) # start value.\n\n# Checking the type before conversion.\nprint(paste(\"Type after conversion:\", class(grades)))\n\n# Converting type and saving it into variable grades_factor.\ngrades_factor &lt;- as.factor(grades)\n\n# Checking the type after conversion.\nprint(paste(\"Type after conversion:\", class(grades_factor)))\n\n# Printing out the converted start value.\nprint(grades_factor)  # Outputs a factor with levels 75, 85, 90\n\n[1] \"Type after conversion: numeric\"\n[1] \"Type after conversion: factor\"\n[1] 85 90 75\nLevels: 75 85 90\n\n\nHINT: - If by now you have not caught on ! Let me help out. Generally to convert a specify data type to another we call the as.type function but the idea is you write the ‘as.”then here you write the datatype you wish to convert to”()’. - So thats to say if am to convert to Numeric i will call as.Numeric(), to integer i will call as.integer(), to complex i will call as.complex(). i think you see the pattern here. Happy R wizarding.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#numeric-data-1",
    "href": "R-Course/r_variables.html#numeric-data-1",
    "title": "Introduction to Variables",
    "section": "1. Numeric Data",
    "text": "1. Numeric Data\n\nCreate two numeric variables, a and b, and assign them any numbers you like.\nPerform the following operations and print the results:\n\nSum of a and b.\nDifference between a and b.\nProduct of a and b.\nDivision of a by b.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#character-data-1",
    "href": "R-Course/r_variables.html#character-data-1",
    "title": "Introduction to Variables",
    "section": "2. Character Data",
    "text": "2. Character Data\n\nCreate two character variables, first_name and last_name, and assign them your first and last names.\nConcatenate first_name and last_name into a single string with a space between them, and print the result.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#factor-data-1",
    "href": "R-Course/r_variables.html#factor-data-1",
    "title": "Introduction to Variables",
    "section": "3. Factor Data",
    "text": "3. Factor Data\n\nCreate a factor variable days representing the days of the week, with at least three repeated days.\nPrint the levels of the days factor.\nCount the number of occurrences of each day and print the result.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#type-conversion-1",
    "href": "R-Course/r_variables.html#type-conversion-1",
    "title": "Introduction to Variables",
    "section": "4. Type Conversion",
    "text": "4. Type Conversion\n\nCreate a numeric variable score and assign it a value.\nConvert score to a character and print the result.\nCreate a character variable age_str that contains a number as a string (e.g., “25”).\nConvert age_str to a numeric value and print the result.\nCreate a factor from a vector of numbers representing exam scores. Print the factor levels.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#logical-values",
    "href": "R-Course/r_variables.html#logical-values",
    "title": "Introduction to Variables",
    "section": "5. Logical Values",
    "text": "5. Logical Values\n\nCreate a logical variable is_holiday and assign it a value (TRUE or FALSE).\nWrite an if statement that prints “Relax, it’s a holiday!” if is_holiday is TRUE, and “Time to work!” if is_holiday is FALSE.\nCompare two numbers using the greater than (&gt;) operator and store the result in a logical variable. Print the result.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Course/r_variables.html#bonus-question",
    "href": "R-Course/r_variables.html#bonus-question",
    "title": "Introduction to Variables",
    "section": "6. Bonus Question",
    "text": "6. Bonus Question\n\nCombine the concepts above by writing a small R script that checks if a student’s exam score (numeric) is above a certain threshold (say, 50). If it is, print “Passed”, otherwise print “Failed”. Convert the score to a character before printing.",
    "crumbs": [
      "R-Course",
      "Introduction to Variables"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#data-visualization-crash-course",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#data-visualization-crash-course",
    "title": "Data Visualization",
    "section": "Data Visualization Crash Course",
    "text": "Data Visualization Crash Course\nData visualization is a crucial aspect of data analysis, allowing you to understand patterns, trends, and insights effectively. R, with its rich ecosystem of packages, offers powerful tools for creating a wide variety of visualizations. In this tutorial, we’ll explore how to create basic graphs using both base R and the ggplot2 package, one of the most popular visualization libraries in R.",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#table-of-contents",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#table-of-contents",
    "title": "Data Visualization",
    "section": "Table of Contents",
    "text": "Table of Contents\n\nGetting Started\nLoading Data\nInstalling and Loading Necessary Packages\nBasic Graphs in Base R\n\nScatter Plot\nBar Chart\nHistogram\nBox Plot\nLine Graph\n\nBasic Graphs with ggplot2\n\nScatter Plot\nBar Chart\nHistogram\nBox Plot\nLine Graph\n\nCustomizing Your Plots\nSaving Your Plots\nConclusion\n\n\n\n\n\n\n Don’t Miss Any Updates!\n\n\n\n\nBefore we continue, I have a humble request, to be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#getting-started",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#getting-started",
    "title": "Data Visualization",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nBefore diving into data visualization, ensure you have R and a code editor or IDE like RStudio or Visual Studio Code installed on your computer.\n\nDownload R: CRAN R Project\nDownload RStudio: RStudio Download",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#loading-data",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#loading-data",
    "title": "Data Visualization",
    "section": "2. Loading Data",
    "text": "2. Loading Data\nFor demonstration purposes, we’ll use the built-in mtcars dataset, which contains data about various car models.\n\n# Load the dataset\ndata(mtcars)\n\n# View the first few rows\nhead(mtcars)\n\n\nA data.frame: 6 × 11\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#installing-and-loading-necessary-packages",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#installing-and-loading-necessary-packages",
    "title": "Data Visualization",
    "section": "3. Installing and Loading Necessary Packages",
    "text": "3. Installing and Loading Necessary Packages\nWhile base R offers basic plotting capabilities, ggplot2 provides a more flexible and powerful system for creating complex plots.\n\n# Install ggplot2 if you haven't already\ninstall.packages(\"ggplot2\")\n\n# Load ggplot2\nlibrary(ggplot2)\n\nInstalling package into ‘/home/jumashafara/R/x86_64-pc-linux-gnu-library/4.3’\n(as ‘lib’ is unspecified)",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#basic-graphs-in-base-r",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#basic-graphs-in-base-r",
    "title": "Data Visualization",
    "section": "4. Basic Graphs in Base R",
    "text": "4. Basic Graphs in Base R\n\nScatter Plot\nPurpose: To visualize the relationship between two continuous variables.\n\n# Scatter plot of mpg vs. wt\nplot(mtcars$wt, mtcars$mpg,\n     main = \"Scatter Plot of MPG vs Weight\",\n     xlab = \"Weight (1000 lbs)\",\n     ylab = \"Miles Per Gallon (MPG)\",\n     pch = 19,  # Solid circles\n     col = \"#008374\")\n\n\n\n\n\n\n\n\nExplanation: - plot(x, y): Creates a scatter plot with x on the horizontal axis and y on the vertical axis. - main: Title of the plot. - xlab and ylab: Labels for the x and y axes. - pch: Plotting symbol (19 is a solid circle). - col: Color of the points.\n\n\nBar Chart\nPurpose: To compare categorical data.\n\n# Bar chart of the number of cars by number of cylinders\ncyl_counts &lt;- table(mtcars$cyl)\nbarplot(cyl_counts,\n        main = \"Number of Cars by Cylinders\",\n        xlab = \"Number of Cylinders\",\n        ylab = \"Frequency\",\n        col = \"#008374\")\n\n\n\n\n\n\n\n\nExplanation: - table(): Creates a frequency table of the categorical variable. - barplot(): Generates a bar chart from the frequency table.\n\n\nHistogram\nPurpose: To display the distribution of a continuous variable.\n\n# Histogram of MPG\nhist(mtcars$mpg,\n     main = \"Histogram of MPG\",\n     xlab = \"Miles Per Gallon (MPG)\",\n     col = \"#66fdee\",\n     border = \"#008374\")\n\n\n\n\n\n\n\n\nExplanation: - hist(): Creates a histogram. - col: Fill color of the bars. - border: Color of the bar borders.\n\n\nBox Plot\nPurpose: To show the distribution of a continuous variable and identify outliers.\n\n# Box plot of MPG by number of cylinders\nboxplot(mpg ~ cyl, data = mtcars,\n        main = \"Box Plot of MPG by Cylinders\",\n        xlab = \"Number of Cylinders\",\n        ylab = \"Miles Per Gallon (MPG)\",\n        col = \"#66fdee\")\n\n\n\n\n\n\n\n\nExplanation: - boxplot(y ~ x, data): Creates a box plot of y grouped by x.\n\n\nLine Graph\nPurpose: To display trends over time or ordered categories.\n\n# Line graph of MPG for each car (ordered by weight)\nmtcars_ordered &lt;- mtcars[order(mtcars$wt), ]\nplot(mtcars_ordered$wt, mtcars_ordered$mpg,\n     type = \"o\",  # Both lines and points\n     main = \"Line Graph of MPG vs Weight\",\n     xlab = \"Weight (1000 lbs)\",\n     ylab = \"Miles Per Gallon (MPG)\",\n     col = \"purple\")\n\n\n\n\n\n\n\n\nExplanation: - type = \"o\": Overplotted points and lines. - Ordering the data can make the line graph more meaningful.",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#basic-graphs-with-ggplot2",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#basic-graphs-with-ggplot2",
    "title": "Data Visualization",
    "section": "5. Basic Graphs with ggplot2",
    "text": "5. Basic Graphs with ggplot2\nggplot2 follows the Grammar of Graphics, allowing for a more structured and layered approach to building plots.\n\nScatter Plot\n\n# Scatter plot of mpg vs wt using ggplot2\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(color = \"#008374\", size = 3) +\n  ggtitle(\"Scatter Plot of MPG vs Weight\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nExplanation: - ggplot(data, aes()): Initializes the plot with data and aesthetic mappings. - geom_point(): Adds points to the plot. - ggtitle(), xlab(), ylab(): Add title and axis labels. - theme_minimal(): Applies a minimal theme to the plot.\n\n\nBar Chart\n\n# Bar chart of the number of cars by cylinders using ggplot2\nggplot(mtcars, aes(x = factor(cyl))) +\n  geom_bar(fill = \"#00fdee\") +\n  ggtitle(\"Number of Cars by Cylinders\") +\n  xlab(\"Number of Cylinders\") +\n  ylab(\"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nExplanation: - aes(x = factor(cyl)): Treats cyl as a categorical variable. - geom_bar(): Automatically counts the number of occurrences for each category.\n\n\nHistogram\n\n# Histogram of MPG using ggplot2\nggplot(mtcars, aes(x = mpg)) +\n  geom_histogram(binwidth = 2, fill = \"#66fdee\", color = \"#008374\") +\n  ggtitle(\"Histogram of MPG\") +\n  xlab(\"Miles Per Gallon (MPG)\") +\n  ylab(\"Frequency\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\nExplanation: - geom_histogram(): Creates a histogram. - binwidth: Sets the width of each bin.\n\n\nBox Plot\n\n# Box plot of MPG by cylinders using ggplot2\nggplot(mtcars, aes(x = factor(cyl), y = mpg)) +\n  geom_boxplot(fill = \"#008374\") +\n  ggtitle(\"Box Plot of MPG by Cylinders\") +\n  xlab(\"Number of Cylinders\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nExplanation: - geom_boxplot(): Creates a box plot.\n\n\nLine Graph\n\n# Line graph of MPG vs Weight using ggplot2\nggplot(mtcars_ordered, aes(x = wt, y = mpg)) +\n  geom_line(color = \"#008374\") +\n  geom_point(color = \"#66fdee\", size = 2) +\n  ggtitle(\"Line Graph of MPG vs Weight\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nExplanation: - geom_line(): Adds lines. - geom_point(): Adds points.",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#customizing-your-plots",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#customizing-your-plots",
    "title": "Data Visualization",
    "section": "6. Customizing Your Plots",
    "text": "6. Customizing Your Plots\nCustomization enhances the readability and aesthetics of your plots. Here are some common customizations:\n\nChanging Themes\nggplot2 offers several themes to change the overall look of the plot.\n\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(color = \"#008374\") +\n  ggtitle(\"Scatter Plot of MPG vs Weight\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_bw()  # Changes to a black and white theme\n\n\n\n\n\n\n\n\nOther themes: - theme_minimal() - theme_classic() - theme_dark()\n\n\nAdding Colors and Fill\nYou can map variables to colors for more informative plots.\n\n# Scatter plot with color based on number of cylinders\nggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(size=3) +\n  ggtitle(\"Scatter Plot of MPG vs Weight by Cylinders\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"#909090\", \"#66fdee\", \"#008374\"),\n                     name = \"Cylinders\")\n\n\n\n\n\n\n\n\nExplanation: - color = factor(cyl): Colors points based on the number of cylinders. - scale_color_manual(): Manually sets the colors and legend title.\n\n\nFaceting\nFaceting allows you to create multiple plots based on a categorical variable.\n\n# Scatter plot faceted by number of cylinders\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(color = \"#008374\", size=3) +\n  ggtitle(\"Scatter Plot of MPG vs Weight by Cylinders\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal() +\n  facet_wrap(~ cyl)\n\n\n\n\n\n\n\n\nExplanation: - facet_wrap(~ cyl): Creates a separate plot for each level of cyl.\n\n\nAdding Labels and Annotations\nYou can add text labels or annotations to highlight specific points.\n\n# Scatter plot with labels for cars with highest MPG\ntop_mpg &lt;- mtcars[mtcars$mpg &gt; 30, ]\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(color = \"#008374\") +\n  geom_text(data = top_mpg, aes(label = rownames(top_mpg)),\n            vjust = -1, size = 3) +\n  ggtitle(\"Scatter Plot of MPG vs Weight with Labels\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nExplanation: - geom_text(): Adds text labels to specific points. - vjust: Vertical adjustment of text position.",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#saving-your-plots",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#saving-your-plots",
    "title": "Data Visualization",
    "section": "7. Saving Your Plots",
    "text": "7. Saving Your Plots\nAfter creating your plot, you might want to save it to a file.\n\nSaving Base R Plots\n\n# Save scatter plot as PNG\npng(\"scatter_mpg_wt.png\", width = 800, height = 600)\nplot(mtcars$wt, mtcars$mpg,\n     main = \"Scatter Plot of MPG vs Weight\",\n     xlab = \"Weight (1000 lbs)\",\n     ylab = \"Miles Per Gallon (MPG)\",\n     pch = 19,\n     col = \"blue\")\ndev.off()\n\npng: 2\n\n\n\n\nSaving ggplot2 Plots\n\n# Create the plot\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(color = \"blue\", size = 3) +\n  ggtitle(\"Scatter Plot of MPG vs Weight\") +\n  xlab(\"Weight (1000 lbs)\") +\n  ylab(\"Miles Per Gallon (MPG)\") +\n  theme_minimal()\n\n# Save the plot\nggsave(\"ggplot_scatter_mpg_wt.png\", plot = p, width = 8, height = 6, dpi = 300)\n\nExplanation: - ggsave(): Saves the last plot or a specified plot to a file. - width, height: Size of the saved plot in inches. - dpi: Resolution of the saved plot.",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#conclusion",
    "href": "R-Data-Analysis/Week3-Data-Visualization/3.1_data_visualization_crash_course.html#conclusion",
    "title": "Data Visualization",
    "section": "8. Conclusion",
    "text": "8. Conclusion\nIn this tutorial, we’ve covered the basics of data visualization in R using both base R and ggplot2. Here’s a quick recap:\n\nBase R provides straightforward functions for creating basic plots quickly.\nggplot2 offers a more flexible and powerful approach, enabling complex and highly customizable visualizations.\nCustomizing your plots enhances clarity and aesthetics, making your data more interpretable.\nSaving your plots allows you to include them in reports, presentations, or share them with others.\n\n\nNext Steps\n\nExplore Advanced ggplot2 Features: Learn about facets, themes, and more geoms.\nInteractive Visualizations: Consider packages like plotly or shiny for interactive plots.\nData Manipulation: Use dplyr and tidyr to prepare your data for visualization.\nPractice: Apply these techniques to your own datasets to reinforce your learning.\n\nHappy plotting!\n\nWhat’s on your mind? Put it in the comments!",
    "crumbs": [
      "R-Data-Analysis",
      "Week3-Data-Visualization",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R-Data-Analysis/outline.html",
    "href": "R-Data-Analysis/outline.html",
    "title": "Data Analysis with R Outline",
    "section": "",
    "text": "Understanding the role of data analysis in decision-making\nIntroduction to R for data analysis (base R, Tidyverse)\nExploring data types, data structures, and data manipulation in R"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-1-introduction-to-data-analysis",
    "href": "R-Data-Analysis/outline.html#week-1-introduction-to-data-analysis",
    "title": "Data Analysis with R Outline",
    "section": "",
    "text": "Understanding the role of data analysis in decision-making\nIntroduction to R for data analysis (base R, Tidyverse)\nExploring data types, data structures, and data manipulation in R"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-2-introduction-to-data-cleaning-and-preprocessing",
    "href": "R-Data-Analysis/outline.html#week-2-introduction-to-data-cleaning-and-preprocessing",
    "title": "Data Analysis with R Outline",
    "section": "Week 2: Introduction to Data Cleaning and Preprocessing",
    "text": "Week 2: Introduction to Data Cleaning and Preprocessing\n\nData quality assurance in R\nIdentifying and handling missing data\nDealing with outliers and other data anomalies"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-3-introduction-to-data-visualization",
    "href": "R-Data-Analysis/outline.html#week-3-introduction-to-data-visualization",
    "title": "Data Analysis with R Outline",
    "section": "Week 3: Introduction to Data Visualization",
    "text": "Week 3: Introduction to Data Visualization\n\nBasic plotting techniques\nExtracting insights from data distributions and relationships\nPerforming Exploratory Data Analysis (EDA)"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-4-introduction-to-machine-learning",
    "href": "R-Data-Analysis/outline.html#week-4-introduction-to-machine-learning",
    "title": "Data Analysis with R Outline",
    "section": "Week 4: Introduction to Machine Learning",
    "text": "Week 4: Introduction to Machine Learning\n\nOverview of machine learning concepts in R\nSupervised vs. unsupervised learning in R\nHands-on exercises with caret for classification and regression"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-5-statistical-analysis",
    "href": "R-Data-Analysis/outline.html#week-5-statistical-analysis",
    "title": "Data Analysis with R Outline",
    "section": "Week 5: Statistical Analysis",
    "text": "Week 5: Statistical Analysis\n\nDescriptive statistics and summary metrics in R\nHypothesis testing and p-values\nImplementing statistical analysis in R"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-6-data-wrangling-and-feature-engineering",
    "href": "R-Data-Analysis/outline.html#week-6-data-wrangling-and-feature-engineering",
    "title": "Data Analysis with R Outline",
    "section": "Week 6: Data Wrangling and Feature Engineering",
    "text": "Week 6: Data Wrangling and Feature Engineering\n\nFeature scaling and engineering for model improvement\nData normalization and standardization\nHandling categorical data and encoding techniques"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-7-model-evaluation-and-validation",
    "href": "R-Data-Analysis/outline.html#week-7-model-evaluation-and-validation",
    "title": "Data Analysis with R Outline",
    "section": "Week 7: Model Evaluation and Validation",
    "text": "Week 7: Model Evaluation and Validation\n\nEvaluating machine learning models in R (e.g., caret, MLmetrics)\nCross-validation and hyperparameter tuning\nModel selection and performance metrics in R"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-8-time-series-analysis",
    "href": "R-Data-Analysis/outline.html#week-8-time-series-analysis",
    "title": "Data Analysis with R Outline",
    "section": "Week 8: Time Series Analysis",
    "text": "Week 8: Time Series Analysis\n\nUnderstanding time series data in R\nTime series visualization and decomposition\nForecasting techniques with R"
  },
  {
    "objectID": "R-Data-Analysis/outline.html#week-x-capstone-project",
    "href": "R-Data-Analysis/outline.html#week-x-capstone-project",
    "title": "Data Analysis with R Outline",
    "section": "Week X: Capstone Project",
    "text": "Week X: Capstone Project\n\nApplying learned concepts to a real-world dataset\nData analysis, visualization, and modeling in R\nPresenting findings and insights with R Markdown or Shiny"
  }
]